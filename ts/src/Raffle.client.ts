/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ExecuteMsg, AssetInfo, Uint128, Timestamp, Uint64, Decimal, Binary, HexBinary, Cw721Coin, Sg721Token, Coin, RaffleOptionsMsg, Cw721ReceiveMsg, NoisCallback, InstantiateMsg, QueryMsg, QueryFilters, Addr, RaffleState, AllRafflesResponse, RaffleResponse, RaffleInfo, RaffleOptions, ArrayOfString, ConfigResponse, Uint32 } from "./Raffle.types";
export interface RaffleReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  raffleInfo: ({
    raffleId
  }: {
    raffleId: number;
  }) => Promise<RaffleInfoResponse>;
  allRaffles: ({
    filters,
    limit,
    startAfter
  }: {
    filters?: QueryFilters;
    limit?: number;
    startAfter?: number;
  }) => Promise<AllRafflesResponse>;
  allTickets: ({
    limit,
    raffleId,
    startAfter
  }: {
    limit?: number;
    raffleId: number;
    startAfter?: number;
  }) => Promise<AllTicketsResponse>;
  ticketCount: ({
    owner,
    raffleId
  }: {
    owner: string;
    raffleId: number;
  }) => Promise<TicketCountResponse>;
}
export class RaffleQueryClient implements RaffleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.raffleInfo = this.raffleInfo.bind(this);
    this.allRaffles = this.allRaffles.bind(this);
    this.allTickets = this.allTickets.bind(this);
    this.ticketCount = this.ticketCount.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  raffleInfo = async ({
    raffleId
  }: {
    raffleId: number;
  }): Promise<RaffleInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      raffle_info: {
        raffle_id: raffleId
      }
    });
  };
  allRaffles = async ({
    filters,
    limit,
    startAfter
  }: {
    filters?: QueryFilters;
    limit?: number;
    startAfter?: number;
  }): Promise<AllRafflesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_raffles: {
        filters,
        limit,
        start_after: startAfter
      }
    });
  };
  allTickets = async ({
    limit,
    raffleId,
    startAfter
  }: {
    limit?: number;
    raffleId: number;
    startAfter?: number;
  }): Promise<AllTicketsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_tickets: {
        limit,
        raffle_id: raffleId,
        start_after: startAfter
      }
    });
  };
  ticketCount = async ({
    owner,
    raffleId
  }: {
    owner: string;
    raffleId: number;
  }): Promise<TicketCountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ticket_count: {
        owner,
        raffle_id: raffleId
      }
    });
  };
}
export interface RaffleInterface extends RaffleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createRaffle: ({
    assets,
    owner,
    raffleOptions,
    raffleTicketPrice
  }: {
    assets: AssetInfo[];
    owner?: string;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice: AssetInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  cancelRaffle: ({
    raffleId
  }: {
    raffleId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    creationFeeAmount,
    creationFeeDenom,
    feeAddr,
    minimumRaffleDuration,
    minimumRaffleTimeout,
    name,
    noisProxyAddr,
    noisProxyAmount,
    noisProxyDenom,
    owner,
    raffleFee
  }: {
    creationFeeAmount?: Uint128;
    creationFeeDenom?: string[];
    feeAddr?: string;
    minimumRaffleDuration?: number;
    minimumRaffleTimeout?: number;
    name?: string;
    noisProxyAddr?: string;
    noisProxyAmount?: Uint128;
    noisProxyDenom?: string;
    owner?: string;
    raffleFee?: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  modifyRaffle: ({
    raffleId,
    raffleOptions,
    raffleTicketPrice
  }: {
    raffleId: number;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice?: AssetInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  buyTicket: ({
    raffleId,
    sentAssets,
    ticketCount
  }: {
    raffleId: number;
    sentAssets: AssetInfo;
    ticketCount: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claimNft: ({
    raffleId
  }: {
    raffleId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  noisReceive: ({
    callback,
    raffleId
  }: {
    callback: NoisCallback;
    raffleId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  toggleLock: ({
    lock
  }: {
    lock: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateRandomness: ({
    raffleId
  }: {
    raffleId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RaffleClient extends RaffleQueryClient implements RaffleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createRaffle = this.createRaffle.bind(this);
    this.cancelRaffle = this.cancelRaffle.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.modifyRaffle = this.modifyRaffle.bind(this);
    this.buyTicket = this.buyTicket.bind(this);
    this.receive = this.receive.bind(this);
    this.claimNft = this.claimNft.bind(this);
    this.noisReceive = this.noisReceive.bind(this);
    this.toggleLock = this.toggleLock.bind(this);
    this.updateRandomness = this.updateRandomness.bind(this);
  }

  createRaffle = async ({
    assets,
    owner,
    raffleOptions,
    raffleTicketPrice
  }: {
    assets: AssetInfo[];
    owner?: string;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice: AssetInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_raffle: {
        assets,
        owner,
        raffle_options: raffleOptions,
        raffle_ticket_price: raffleTicketPrice
      }
    }, fee, memo, funds);
  };
  cancelRaffle = async ({
    raffleId
  }: {
    raffleId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_raffle: {
        raffle_id: raffleId
      }
    }, fee, memo, funds);
  };
  updateConfig = async ({
    creationFeeAmount,
    creationFeeDenom,
    feeAddr,
    minimumRaffleDuration,
    minimumRaffleTimeout,
    name,
    noisProxyAddr,
    noisProxyAmount,
    noisProxyDenom,
    owner,
    raffleFee
  }: {
    creationFeeAmount?: Uint128;
    creationFeeDenom?: string[];
    feeAddr?: string;
    minimumRaffleDuration?: number;
    minimumRaffleTimeout?: number;
    name?: string;
    noisProxyAddr?: string;
    noisProxyAmount?: Uint128;
    noisProxyDenom?: string;
    owner?: string;
    raffleFee?: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        creation_fee_amount: creationFeeAmount,
        creation_fee_denom: creationFeeDenom,
        fee_addr: feeAddr,
        minimum_raffle_duration: minimumRaffleDuration,
        minimum_raffle_timeout: minimumRaffleTimeout,
        name,
        nois_proxy_addr: noisProxyAddr,
        nois_proxy_amount: noisProxyAmount,
        nois_proxy_denom: noisProxyDenom,
        owner,
        raffle_fee: raffleFee
      }
    }, fee, memo, funds);
  };
  modifyRaffle = async ({
    raffleId,
    raffleOptions,
    raffleTicketPrice
  }: {
    raffleId: number;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice?: AssetInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      modify_raffle: {
        raffle_id: raffleId,
        raffle_options: raffleOptions,
        raffle_ticket_price: raffleTicketPrice
      }
    }, fee, memo, funds);
  };
  buyTicket = async ({
    raffleId,
    sentAssets,
    ticketCount
  }: {
    raffleId: number;
    sentAssets: AssetInfo;
    ticketCount: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_ticket: {
        raffle_id: raffleId,
        sent_assets: sentAssets,
        ticket_count: ticketCount
      }
    }, fee, memo, funds);
  };
  receive = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        msg,
        sender,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  claimNft = async ({
    raffleId
  }: {
    raffleId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_nft: {
        raffle_id: raffleId
      }
    }, fee, memo, funds);
  };
  noisReceive = async ({
    callback,
    raffleId
  }: {
    callback: NoisCallback;
    raffleId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      nois_receive: {
        callback,
        raffle_id: raffleId
      }
    }, fee, memo, funds);
  };
  toggleLock = async ({
    lock
  }: {
    lock: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      toggle_lock: {
        lock
      }
    }, fee, memo, funds);
  };
  updateRandomness = async ({
    raffleId
  }: {
    raffleId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_randomness: {
        raffle_id: raffleId
      }
    }, fee, memo, funds);
  };
}