{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "create_raffle"
      ],
      "properties": {
        "create_raffle": {
          "type": "object",
          "required": [
            "assets",
            "raffle_options",
            "raffle_ticket_price"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "raffle_options": {
              "$ref": "#/definitions/RaffleOptionsMsg"
            },
            "raffle_ticket_price": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "cancel_raffle"
      ],
      "properties": {
        "cancel_raffle": {
          "type": "object",
          "required": [
            "raffle_id"
          ],
          "properties": {
            "raffle_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_raffle"
      ],
      "properties": {
        "claim_raffle": {
          "type": "object",
          "required": [
            "raffle_id"
          ],
          "properties": {
            "raffle_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "creation_coins": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "drand_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/DrandConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fee_addr": {
              "type": [
                "string",
                "null"
              ]
            },
            "fee_discounts": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/FeeDiscountMsg"
              }
            },
            "max_tickets_per_raffle": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "minimum_raffle_duration": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "name": {
              "type": [
                "string",
                "null"
              ]
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "raffle_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "modify_raffle"
      ],
      "properties": {
        "modify_raffle": {
          "type": "object",
          "required": [
            "raffle_id",
            "raffle_options"
          ],
          "properties": {
            "raffle_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "raffle_options": {
              "$ref": "#/definitions/RaffleOptionsMsg"
            },
            "raffle_ticket_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "buy_ticket"
      ],
      "properties": {
        "buy_ticket": {
          "type": "object",
          "required": [
            "raffle_id",
            "sent_assets",
            "ticket_count"
          ],
          "properties": {
            "on_behalf_of": {
              "type": [
                "string",
                "null"
              ]
            },
            "raffle_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "sent_assets": {
              "$ref": "#/definitions/AssetInfo"
            },
            "ticket_count": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Provide job_id for randomness contract Provide randomness from drand",
      "type": "object",
      "required": [
        "update_randomness"
      ],
      "properties": {
        "update_randomness": {
          "type": "object",
          "required": [
            "raffle_id",
            "randomness"
          ],
          "properties": {
            "raffle_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "randomness": {
              "$ref": "#/definitions/DrandRandomness"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "toggle_lock"
      ],
      "properties": {
        "toggle_lock": {
          "type": "object",
          "required": [
            "lock"
          ],
          "properties": {
            "lock": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AdvantageOptionsMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw721_coin"
          ],
          "properties": {
            "cw721_coin": {
              "type": "object",
              "required": [
                "nft_address",
                "nft_count"
              ],
              "properties": {
                "nft_address": {
                  "type": "string"
                },
                "nft_count": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Cw20Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "coin"
          ],
          "properties": {
            "coin": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "sg721_token"
          ],
          "properties": {
            "sg721_token": {
              "type": "object",
              "required": [
                "nft_address",
                "nft_count"
              ],
              "properties": {
                "nft_address": {
                  "type": "string"
                },
                "nft_count": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dao_voting_power"
          ],
          "properties": {
            "dao_voting_power": {
              "type": "object",
              "required": [
                "dao_address",
                "min_voting_power"
              ],
              "properties": {
                "dao_address": {
                  "type": "string"
                },
                "min_voting_power": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "type": "object",
              "required": [
                "min_voting_power"
              ],
              "properties": {
                "min_voting_power": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetInfo": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw721_coin"
          ],
          "properties": {
            "cw721_coin": {
              "$ref": "#/definitions/Cw721Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "coin"
          ],
          "properties": {
            "coin": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "sg721_token"
          ],
          "properties": {
            "sg721_token": {
              "$ref": "#/definitions/Sg721Token"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Cw721Coin": {
      "type": "object",
      "required": [
        "address",
        "token_id"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DrandConfig": {
      "type": "object",
      "required": [
        "drand_url",
        "random_pubkey",
        "timeout",
        "verify_signature_contract"
      ],
      "properties": {
        "drand_url": {
          "description": "The drand provider url (to find the right entropy provider)",
          "type": "string"
        },
        "random_pubkey": {
          "$ref": "#/definitions/Binary"
        },
        "timeout": {
          "description": "Duration of the randomness providing round",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "verify_signature_contract": {
          "description": "The contract that can verify the entropy signature",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DrandRandomness": {
      "type": "object",
      "required": [
        "previous_signature",
        "round",
        "signature"
      ],
      "properties": {
        "previous_signature": {
          "$ref": "#/definitions/Binary"
        },
        "round": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      },
      "additionalProperties": false
    },
    "FeeDiscountMsg": {
      "type": "object",
      "required": [
        "condition",
        "discount"
      ],
      "properties": {
        "condition": {
          "$ref": "#/definitions/AdvantageOptionsMsg"
        },
        "discount": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "RaffleOptionsMsg": {
      "type": "object",
      "required": [
        "gating_raffle",
        "one_winner_per_asset"
      ],
      "properties": {
        "comment": {
          "type": [
            "string",
            "null"
          ]
        },
        "gating_raffle": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdvantageOptionsMsg"
          }
        },
        "max_ticket_number": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "max_ticket_per_address": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "min_ticket_number": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "one_winner_per_asset": {
          "type": "boolean"
        },
        "raffle_duration": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "raffle_preview": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "raffle_start_timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "whitelist": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Sg721Token": {
      "type": "object",
      "required": [
        "address",
        "token_id"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
