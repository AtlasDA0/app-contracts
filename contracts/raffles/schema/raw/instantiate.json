{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "fee_discounts",
    "name",
    "nois_proxy_addr",
    "nois_proxy_coin",
    "raffle_fee"
  ],
  "properties": {
    "creation_coins": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/Coin"
      }
    },
    "fee_addr": {
      "type": [
        "string",
        "null"
      ]
    },
    "fee_discounts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FeeDiscountMsg"
      }
    },
    "max_ticket_number": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    },
    "minimum_raffle_duration": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "name": {
      "type": "string"
    },
    "nois_proxy_addr": {
      "type": "string"
    },
    "nois_proxy_coin": {
      "$ref": "#/definitions/Coin"
    },
    "owner": {
      "type": [
        "string",
        "null"
      ]
    },
    "raffle_fee": {
      "$ref": "#/definitions/Decimal"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AdvantageOptionsMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw721_coin"
          ],
          "properties": {
            "cw721_coin": {
              "type": "object",
              "required": [
                "nft_address",
                "nft_count"
              ],
              "properties": {
                "nft_address": {
                  "type": "string"
                },
                "nft_count": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Cw20Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "coin"
          ],
          "properties": {
            "coin": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "sg721_token"
          ],
          "properties": {
            "sg721_token": {
              "type": "object",
              "required": [
                "nft_address",
                "nft_count"
              ],
              "properties": {
                "nft_address": {
                  "type": "string"
                },
                "nft_count": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dao_voting_power"
          ],
          "properties": {
            "dao_voting_power": {
              "type": "object",
              "required": [
                "dao_address",
                "min_voting_power"
              ],
              "properties": {
                "dao_address": {
                  "type": "string"
                },
                "min_voting_power": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "type": "object",
              "required": [
                "min_voting_power"
              ],
              "properties": {
                "min_voting_power": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "FeeDiscountMsg": {
      "type": "object",
      "required": [
        "condition",
        "discount"
      ],
      "properties": {
        "condition": {
          "$ref": "#/definitions/AdvantageOptionsMsg"
        },
        "discount": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
