{
  "contract_name": "nft-loans-nc",
  "contract_version": "0.4.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "fee_rate",
      "name",
      "treasury_addr"
    ],
    "properties": {
      "fee_rate": {
        "$ref": "#/definitions/Decimal"
      },
      "listing_fee_coins": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "$ref": "#/definitions/Coin"
        }
      },
      "name": {
        "type": "string"
      },
      "owner": {
        "type": [
          "string",
          "null"
        ]
      },
      "treasury_addr": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "list_collaterals"
        ],
        "properties": {
          "list_collaterals": {
            "type": "object",
            "required": [
              "tokens"
            ],
            "properties": {
              "comment": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "loan_preview": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AssetInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "terms": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/LoanTerms"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "tokens": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AssetInfo"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to modify the loan terms and the associated comment",
        "type": "object",
        "required": [
          "modify_collaterals"
        ],
        "properties": {
          "modify_collaterals": {
            "type": "object",
            "required": [
              "loan_id"
            ],
            "properties": {
              "comment": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "loan_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "loan_preview": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AssetInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "terms": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/LoanTerms"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to withdraw the collateral before the loan starts",
        "type": "object",
        "required": [
          "withdraw_collaterals"
        ],
        "properties": {
          "withdraw_collaterals": {
            "type": "object",
            "required": [
              "loan_id"
            ],
            "properties": {
              "loan_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Make an offer to deposited collaterals",
        "type": "object",
        "required": [
          "make_offer"
        ],
        "properties": {
          "make_offer": {
            "type": "object",
            "required": [
              "borrower",
              "loan_id",
              "terms"
            ],
            "properties": {
              "borrower": {
                "type": "string"
              },
              "comment": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "loan_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "terms": {
                "$ref": "#/definitions/LoanTerms"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cancel_offer"
        ],
        "properties": {
          "cancel_offer": {
            "type": "object",
            "required": [
              "global_offer_id"
            ],
            "properties": {
              "global_offer_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "refuse_offer"
        ],
        "properties": {
          "refuse_offer": {
            "type": "object",
            "required": [
              "global_offer_id"
            ],
            "properties": {
              "global_offer_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_refused_offer"
        ],
        "properties": {
          "withdraw_refused_offer": {
            "type": "object",
            "required": [
              "global_offer_id"
            ],
            "properties": {
              "global_offer_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "accept_offer"
        ],
        "properties": {
          "accept_offer": {
            "type": "object",
            "required": [
              "global_offer_id"
            ],
            "properties": {
              "global_offer_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "accept_loan"
        ],
        "properties": {
          "accept_loan": {
            "type": "object",
            "required": [
              "borrower",
              "loan_id"
            ],
            "properties": {
              "borrower": {
                "type": "string"
              },
              "comment": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "loan_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "repay_borrowed_funds"
        ],
        "properties": {
          "repay_borrowed_funds": {
            "type": "object",
            "required": [
              "loan_id"
            ],
            "properties": {
              "loan_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_defaulted_loan"
        ],
        "properties": {
          "withdraw_defaulted_loan": {
            "type": "object",
            "required": [
              "borrower",
              "loan_id"
            ],
            "properties": {
              "borrower": {
                "type": "string"
              },
              "loan_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "toggle_lock"
        ],
        "properties": {
          "toggle_lock": {
            "type": "object",
            "required": [
              "lock"
            ],
            "properties": {
              "lock": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Internal state",
        "type": "object",
        "required": [
          "set_owner"
        ],
        "properties": {
          "set_owner": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_fee_destination"
        ],
        "properties": {
          "set_fee_destination": {
            "type": "object",
            "required": [
              "treasury_addr"
            ],
            "properties": {
              "treasury_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_fee_rate"
        ],
        "properties": {
          "set_fee_rate": {
            "type": "object",
            "required": [
              "fee_rate"
            ],
            "properties": {
              "fee_rate": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_listing_coins"
        ],
        "properties": {
          "set_listing_coins": {
            "type": "object",
            "required": [
              "listing_fee_coins"
            ],
            "properties": {
              "listing_fee_coins": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetInfo": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "cw721_coin"
            ],
            "properties": {
              "cw721_coin": {
                "$ref": "#/definitions/Cw721Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "coin"
            ],
            "properties": {
              "coin": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "sg721_token"
            ],
            "properties": {
              "sg721_token": {
                "$ref": "#/definitions/Sg721Token"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Cw721Coin": {
        "type": "object",
        "required": [
          "address",
          "token_id"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "LoanTerms": {
        "type": "object",
        "required": [
          "duration_in_blocks",
          "interest",
          "principle"
        ],
        "properties": {
          "duration_in_blocks": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "interest": {
            "$ref": "#/definitions/Uint128"
          },
          "principle": {
            "$ref": "#/definitions/Coin"
          }
        },
        "additionalProperties": false
      },
      "Sg721Token": {
        "type": "object",
        "required": [
          "address",
          "token_id"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "borrower_info"
        ],
        "properties": {
          "borrower_info": {
            "type": "object",
            "required": [
              "borrower"
            ],
            "properties": {
              "borrower": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "collateral_info"
        ],
        "properties": {
          "collateral_info": {
            "type": "object",
            "required": [
              "borrower",
              "loan_id"
            ],
            "properties": {
              "borrower": {
                "type": "string"
              },
              "loan_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "collaterals"
        ],
        "properties": {
          "collaterals": {
            "type": "object",
            "required": [
              "borrower"
            ],
            "properties": {
              "borrower": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all_collaterals"
        ],
        "properties": {
          "all_collaterals": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "offer_info"
        ],
        "properties": {
          "offer_info": {
            "type": "object",
            "required": [
              "global_offer_id"
            ],
            "properties": {
              "global_offer_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "offers"
        ],
        "properties": {
          "offers": {
            "type": "object",
            "required": [
              "borrower",
              "loan_id"
            ],
            "properties": {
              "borrower": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "loan_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lender_offers"
        ],
        "properties": {
          "lender_offers": {
            "type": "object",
            "required": [
              "lender"
            ],
            "properties": {
              "lender": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_collaterals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultipleCollateralsAllResponse",
      "type": "object",
      "required": [
        "collaterals"
      ],
      "properties": {
        "collaterals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollateralResponse"
          }
        },
        "next_collateral": {
          "type": [
            "array",
            "null"
          ],
          "items": [
            {
              "type": "string"
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetInfo": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "cw721_coin"
              ],
              "properties": {
                "cw721_coin": {
                  "$ref": "#/definitions/Cw721Coin"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "coin"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "sg721_token"
              ],
              "properties": {
                "sg721_token": {
                  "$ref": "#/definitions/Sg721Token"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CollateralInfo": {
          "type": "object",
          "required": [
            "associated_assets",
            "list_date",
            "offer_amount",
            "state"
          ],
          "properties": {
            "active_offer": {
              "type": [
                "string",
                "null"
              ]
            },
            "associated_assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "comment": {
              "type": [
                "string",
                "null"
              ]
            },
            "list_date": {
              "$ref": "#/definitions/Timestamp"
            },
            "loan_preview": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer_amount": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_block": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "state": {
              "$ref": "#/definitions/LoanState"
            },
            "terms": {
              "anyOf": [
                {
                  "$ref": "#/definitions/LoanTerms"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "CollateralResponse": {
          "type": "object",
          "required": [
            "borrower",
            "collateral",
            "loan_id",
            "loan_state"
          ],
          "properties": {
            "borrower": {
              "type": "string"
            },
            "collateral": {
              "$ref": "#/definitions/CollateralInfo"
            },
            "loan_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "loan_state": {
              "$ref": "#/definitions/LoanState"
            }
          },
          "additionalProperties": false
        },
        "Cw721Coin": {
          "type": "object",
          "required": [
            "address",
            "token_id"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LoanState": {
          "type": "string",
          "enum": [
            "published",
            "started",
            "defaulted",
            "ended",
            "inactive"
          ]
        },
        "LoanTerms": {
          "type": "object",
          "required": [
            "duration_in_blocks",
            "interest",
            "principle"
          ],
          "properties": {
            "duration_in_blocks": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "interest": {
              "$ref": "#/definitions/Uint128"
            },
            "principle": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "Sg721Token": {
          "type": "object",
          "required": [
            "address",
            "token_id"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "borrower_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BorrowerInfo",
      "type": "object",
      "required": [
        "last_collateral_id"
      ],
      "properties": {
        "last_collateral_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "collateral_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollateralResponse",
      "type": "object",
      "required": [
        "borrower",
        "collateral",
        "loan_id",
        "loan_state"
      ],
      "properties": {
        "borrower": {
          "type": "string"
        },
        "collateral": {
          "$ref": "#/definitions/CollateralInfo"
        },
        "loan_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "loan_state": {
          "$ref": "#/definitions/LoanState"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetInfo": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "cw721_coin"
              ],
              "properties": {
                "cw721_coin": {
                  "$ref": "#/definitions/Cw721Coin"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "coin"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "sg721_token"
              ],
              "properties": {
                "sg721_token": {
                  "$ref": "#/definitions/Sg721Token"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CollateralInfo": {
          "type": "object",
          "required": [
            "associated_assets",
            "list_date",
            "offer_amount",
            "state"
          ],
          "properties": {
            "active_offer": {
              "type": [
                "string",
                "null"
              ]
            },
            "associated_assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "comment": {
              "type": [
                "string",
                "null"
              ]
            },
            "list_date": {
              "$ref": "#/definitions/Timestamp"
            },
            "loan_preview": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer_amount": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_block": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "state": {
              "$ref": "#/definitions/LoanState"
            },
            "terms": {
              "anyOf": [
                {
                  "$ref": "#/definitions/LoanTerms"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Cw721Coin": {
          "type": "object",
          "required": [
            "address",
            "token_id"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LoanState": {
          "type": "string",
          "enum": [
            "published",
            "started",
            "defaulted",
            "ended",
            "inactive"
          ]
        },
        "LoanTerms": {
          "type": "object",
          "required": [
            "duration_in_blocks",
            "interest",
            "principle"
          ],
          "properties": {
            "duration_in_blocks": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "interest": {
              "$ref": "#/definitions/Uint128"
            },
            "principle": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "Sg721Token": {
          "type": "object",
          "required": [
            "address",
            "token_id"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "collaterals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultipleCollateralsResponse",
      "type": "object",
      "required": [
        "collaterals"
      ],
      "properties": {
        "collaterals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollateralResponse"
          }
        },
        "next_collateral": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetInfo": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "cw721_coin"
              ],
              "properties": {
                "cw721_coin": {
                  "$ref": "#/definitions/Cw721Coin"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "coin"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "sg721_token"
              ],
              "properties": {
                "sg721_token": {
                  "$ref": "#/definitions/Sg721Token"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CollateralInfo": {
          "type": "object",
          "required": [
            "associated_assets",
            "list_date",
            "offer_amount",
            "state"
          ],
          "properties": {
            "active_offer": {
              "type": [
                "string",
                "null"
              ]
            },
            "associated_assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "comment": {
              "type": [
                "string",
                "null"
              ]
            },
            "list_date": {
              "$ref": "#/definitions/Timestamp"
            },
            "loan_preview": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer_amount": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_block": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "state": {
              "$ref": "#/definitions/LoanState"
            },
            "terms": {
              "anyOf": [
                {
                  "$ref": "#/definitions/LoanTerms"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "CollateralResponse": {
          "type": "object",
          "required": [
            "borrower",
            "collateral",
            "loan_id",
            "loan_state"
          ],
          "properties": {
            "borrower": {
              "type": "string"
            },
            "collateral": {
              "$ref": "#/definitions/CollateralInfo"
            },
            "loan_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "loan_state": {
              "$ref": "#/definitions/LoanState"
            }
          },
          "additionalProperties": false
        },
        "Cw721Coin": {
          "type": "object",
          "required": [
            "address",
            "token_id"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LoanState": {
          "type": "string",
          "enum": [
            "published",
            "started",
            "defaulted",
            "ended",
            "inactive"
          ]
        },
        "LoanTerms": {
          "type": "object",
          "required": [
            "duration_in_blocks",
            "interest",
            "principle"
          ],
          "properties": {
            "duration_in_blocks": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "interest": {
              "$ref": "#/definitions/Uint128"
            },
            "principle": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "Sg721Token": {
          "type": "object",
          "required": [
            "address",
            "token_id"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "fee_rate",
        "global_offer_index",
        "listing_fee_coins",
        "locks",
        "name",
        "owner",
        "treasury_addr"
      ],
      "properties": {
        "fee_rate": {
          "description": "A % used to calculate how much of a loan interest is sent to the fee_distributor",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "global_offer_index": {
          "description": "Tracks the number of offers made across all loans",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "listing_fee_coins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "locks": {
          "description": "lock state prevents new collateral listings to be made",
          "allOf": [
            {
              "$ref": "#/definitions/Locks"
            }
          ]
        },
        "name": {
          "description": "The name of the smart contract",
          "type": "string"
        },
        "owner": {
          "description": "The admin of the smart contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "treasury_addr": {
          "description": "The address which all generated fees are sent to",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Locks": {
          "type": "object",
          "required": [
            "lock",
            "sudo_lock"
          ],
          "properties": {
            "lock": {
              "type": "boolean"
            },
            "sudo_lock": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "lender_offers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultipleOffersResponse",
      "type": "object",
      "required": [
        "offers"
      ],
      "properties": {
        "next_offer": {
          "type": [
            "string",
            "null"
          ]
        },
        "offers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfferResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "LoanTerms": {
          "type": "object",
          "required": [
            "duration_in_blocks",
            "interest",
            "principle"
          ],
          "properties": {
            "duration_in_blocks": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "interest": {
              "$ref": "#/definitions/Uint128"
            },
            "principle": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "OfferInfo": {
          "type": "object",
          "required": [
            "borrower",
            "lender",
            "list_date",
            "loan_id",
            "offer_id",
            "state",
            "terms"
          ],
          "properties": {
            "borrower": {
              "$ref": "#/definitions/Addr"
            },
            "comment": {
              "type": [
                "string",
                "null"
              ]
            },
            "deposited_funds": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "lender": {
              "$ref": "#/definitions/Addr"
            },
            "list_date": {
              "$ref": "#/definitions/Timestamp"
            },
            "loan_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "offer_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "state": {
              "$ref": "#/definitions/OfferState"
            },
            "terms": {
              "$ref": "#/definitions/LoanTerms"
            }
          },
          "additionalProperties": false
        },
        "OfferResponse": {
          "type": "object",
          "required": [
            "global_offer_id",
            "offer_info"
          ],
          "properties": {
            "global_offer_id": {
              "type": "string"
            },
            "offer_info": {
              "$ref": "#/definitions/OfferInfo"
            }
          },
          "additionalProperties": false
        },
        "OfferState": {
          "type": "string",
          "enum": [
            "published",
            "accepted",
            "refused",
            "cancelled"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "offer_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OfferResponse",
      "type": "object",
      "required": [
        "global_offer_id",
        "offer_info"
      ],
      "properties": {
        "global_offer_id": {
          "type": "string"
        },
        "offer_info": {
          "$ref": "#/definitions/OfferInfo"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "LoanTerms": {
          "type": "object",
          "required": [
            "duration_in_blocks",
            "interest",
            "principle"
          ],
          "properties": {
            "duration_in_blocks": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "interest": {
              "$ref": "#/definitions/Uint128"
            },
            "principle": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "OfferInfo": {
          "type": "object",
          "required": [
            "borrower",
            "lender",
            "list_date",
            "loan_id",
            "offer_id",
            "state",
            "terms"
          ],
          "properties": {
            "borrower": {
              "$ref": "#/definitions/Addr"
            },
            "comment": {
              "type": [
                "string",
                "null"
              ]
            },
            "deposited_funds": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "lender": {
              "$ref": "#/definitions/Addr"
            },
            "list_date": {
              "$ref": "#/definitions/Timestamp"
            },
            "loan_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "offer_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "state": {
              "$ref": "#/definitions/OfferState"
            },
            "terms": {
              "$ref": "#/definitions/LoanTerms"
            }
          },
          "additionalProperties": false
        },
        "OfferState": {
          "type": "string",
          "enum": [
            "published",
            "accepted",
            "refused",
            "cancelled"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "offers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultipleOffersResponse",
      "type": "object",
      "required": [
        "offers"
      ],
      "properties": {
        "next_offer": {
          "type": [
            "string",
            "null"
          ]
        },
        "offers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfferResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "LoanTerms": {
          "type": "object",
          "required": [
            "duration_in_blocks",
            "interest",
            "principle"
          ],
          "properties": {
            "duration_in_blocks": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "interest": {
              "$ref": "#/definitions/Uint128"
            },
            "principle": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "OfferInfo": {
          "type": "object",
          "required": [
            "borrower",
            "lender",
            "list_date",
            "loan_id",
            "offer_id",
            "state",
            "terms"
          ],
          "properties": {
            "borrower": {
              "$ref": "#/definitions/Addr"
            },
            "comment": {
              "type": [
                "string",
                "null"
              ]
            },
            "deposited_funds": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "lender": {
              "$ref": "#/definitions/Addr"
            },
            "list_date": {
              "$ref": "#/definitions/Timestamp"
            },
            "loan_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "offer_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "state": {
              "$ref": "#/definitions/OfferState"
            },
            "terms": {
              "$ref": "#/definitions/LoanTerms"
            }
          },
          "additionalProperties": false
        },
        "OfferResponse": {
          "type": "object",
          "required": [
            "global_offer_id",
            "offer_info"
          ],
          "properties": {
            "global_offer_id": {
              "type": "string"
            },
            "offer_info": {
              "$ref": "#/definitions/OfferInfo"
            }
          },
          "additionalProperties": false
        },
        "OfferState": {
          "type": "string",
          "enum": [
            "published",
            "accepted",
            "refused",
            "cancelled"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
